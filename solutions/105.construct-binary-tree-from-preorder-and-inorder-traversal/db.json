{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode buildHelper(int[] preorder, int [] inorder, int preStart, int preEnd, int inStart, int inEnd){\r\n        TreeNode node = new TreeNode(preorder[preStart]);\r\n        if(preStart == preEnd && inStart == inEnd) return node;\r\n       \r\n        int i;\r\n        for(i = inStart; i<= inEnd; ++i){\r\n            if(inorder[i] == preorder[preStart]){\r\n                break;\r\n            }\r\n        }\r\n        int leftLength = i - inStart;\r\n        int rightLength = inEnd - i;\r\n        if(leftLength >0)\r\n            node.left = buildHelper(preorder, inorder, preStart + 1, preStart + leftLength, inStart, i-1);\r\n        else node.left = null;\r\n        \r\n        if(rightLength >0)\r\n            node.right = buildHelper(preorder, inorder, preEnd - rightLength + 1,  preEnd, i+ 1, inEnd);\r\n        else node.right = null;\r\n        return node;\r\n    }\r\n    \r\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\r\n        if(preorder.length == 0 || inorder.length == 0) return null;\r\n    \r\n        return buildHelper(preorder, inorder, 0, preorder.length - 1, 0, preorder.length -1);\r\n    }\r\n}"}