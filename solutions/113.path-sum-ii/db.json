{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    \r\n   // List<List<Integer>> result = new ArrayList<>();\r\n    \r\n    // public void sum(TreeNode node, int sum, List<Integer> font){\r\n    //     if(node == null) return;\r\n    //     List<Integer> newFont = new ArrayList<Integer>();\r\n    //     newFont.addAll(font);\r\n    //     newFont.add(node.val);\r\n    //     if(node.val == sum && node.left == null && node.right == null){\r\n    //         result.add(newFont);\r\n    //         return ;\r\n    //     }\r\n    //     int toSum = sum - node.val;\r\n    //     sum(node.left, toSum, newFont);\r\n    //     sum(node.right, toSum, newFont);\r\n    //     return;\r\n    // }\r\n    \r\n    public void sum(TreeNode node, int sum, Stack<Integer> stack, List<List<Integer>> result){\r\n        if(node == null) return;\r\n        stack.push(node.val);\r\n        if(node.val == sum && node.right == null && node.left == null){\r\n            result.add(new ArrayList(stack));\r\n        }\r\n        int toSum = sum - node.val;\r\n        sum(node.left, toSum, stack, result);\r\n        sum(node.right, toSum, stack, result);\r\n        stack.pop();\r\n    }\r\n    \r\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\r\n        List<List<Integer>> result = new ArrayList<>();\r\n        if(root == null) return result;\r\n        Stack<Integer> stack = new Stack<>(); \r\n        sum(root, sum, stack, result );\r\n        return result;\r\n    }\r\n};"}