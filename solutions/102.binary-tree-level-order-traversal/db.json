{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n//     public void levelForeach(TreeNode node, List<List<Integer>> result, int count){\r\n//         if(node == null) return;\r\n//         if(result.size() <=  count) result.add(count, new ArrayList<Integer>());\r\n//         result.get(count++).add(node.val);\r\n//         levelForeach(node.left, result, count);\r\n//         levelForeach(node.right, result, count);\r\n//         return;\r\n//   }\r\n    \r\n//     public List<List<Integer>> levelOrder(TreeNode root) {\r\n//         List<List<Integer>> result = new ArrayList<>();\r\n//         levelForeach(root, result, 0);\r\n//         return result;\r\n//     }\r\n    public List<List<Integer>> levelOrder(TreeNode root) {\r\n        List<List<Integer>> result = new ArrayList<>();\r\n        if(root == null) return result;\r\n        Queue<TreeNode> queue = new LinkedList<>();\r\n        queue.offer(root);\r\n        TreeNode p;\r\n        while(queue.peek()!= null){\r\n            List<Integer> subList = new ArrayList<>();\r\n            int num = queue.size();\r\n            for(; num > 0; num --){\r\n                p = queue.poll();\r\n                if(p.left != null) queue.offer(p.left);\r\n                if(p.right != null) queue.offer(p.right);\r\n                subList.add(p.val);\r\n            }\r\n            result.add(subList);\r\n           \r\n        }\r\n        return result;\r\n    }\r\n}"}