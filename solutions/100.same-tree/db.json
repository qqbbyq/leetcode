{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        if(p == null && q == null) return true;\r\n        else if(p == null || q == null) return false;\r\n        // return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\r\n    \r\n        Stack<TreeNode> pStack = new Stack<>();\r\n        Stack<TreeNode> qStack = new Stack<>();\r\n        \r\n        pStack.push(p);\r\n        qStack.push(q);\r\n        while(!pStack.empty() && !qStack.empty()){\r\n            TreeNode pNode = pStack.pop();\r\n            TreeNode qNode = qStack.pop();\r\n            if(pNode.val != qNode.val) return false;\r\n            if(pNode.right != null && qNode.right != null){\r\n                pStack.push(pNode.right);\r\n                qStack.push(qNode.right);\r\n            } else if(!(pNode.right == null && qNode.right == null)){\r\n                return false;\r\n            }\r\n             if(pNode.left != null && qNode.left != null){\r\n                pStack.push(pNode.left);\r\n                qStack.push(qNode.left);\r\n            } else if(!(pNode.left == null && qNode.left == null)){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n        \r\n    }\r\n}"}